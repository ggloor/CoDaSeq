% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/codaSeq.PCAplot.r
\name{codaSeq.PCAplot}
\alias{codaSeq.PCAplot}
\title{Visualise and customise a PCA biplot}
\usage{
codaSeq.PCAplot(pcx, plot.groups = FALSE, plot.loadings = TRUE,
                plot.ellipses = NULL, plot.density = NULL, grp = NULL,
                grp.col = NULL, grp.sym = "text", grp.cex = 1,
                load.grp = NULL, load.col = NULL, load.sym = 19,
                load.cex = 0.5, PC = c(1, 2),plot.legend = NULL,
                leg.position = NULL, leg.xy = NULL, leg.cex = 0.55,
                leg.columns = 1, title = "")
}
\arguments{
\item{pcx}{An object produced by \code{prcomp()}. The input to \code{prcomp()} must have
samples in rows and features in columns.}

\item{plot.groups}{Logical value indicating whether or not to colour samples
(i.e. \code{pcx$x}) by group membership. Will be drawn as text or symbols
depending on \code{grp.sym} (default: \code{FALSE}).}

\item{plot.loadings}{Logical value indicating whether or not to plot loadings
(i.e. \code{pcx$rotations}). Will be drawn as text or symbols depending on
\code{load.sym} (default: \code{TRUE}).}

\item{plot.ellipses}{Character vector indicating whether or not to draw
confidence ellipses around sample \emph{or} loading groups. Must be one of either
\code{"groups"} or \code{"loadings"}, or \code{NULL}.}

\item{plot.density}{Logical value indicating whether or not to draw density
plots for the specified principal components above and beside the main
biplot.}

\item{grp}{A list of groups where each element is a vector containing the
indices of group members (default: \code{NULL}).}

\item{grp.col}{A vector of the same length as \code{grp} containing colours for
the corresponding groups (default: \code{NULL}, automatically set to \code{"black"}
if \code{plot.groups= TRUE} and \code{grp.col= NULL}).}

\item{grp.sym}{One of the following (default: \code{"text"}):
\itemize{
\item A single numeric value (uses the specified value to set the \code{pch}
argument for all groups).
\item A vector of numeric values, the same length as \code{grp} (uses the
specified values to set the  \code{pch} argument on a per-group basis, with
each element of \code{grp.sym} paired with the corresponding element of
\code{grp}).
\item A character vector equal to \code{"text"} (plots samples as text, with the
label set to \code{rownames(pcx$x)}).
}}

\item{grp.cex}{A numeric value indicating the relative size of the group
symbols or text to be plotted (default: \code{1}).}

\item{load.grp}{A list of loading groups where each element is a vector
containing the indices of group members (default: \code{NULL}).}

\item{load.col}{A vector the same length as \code{load.grp} containing
colours for the corresponding loading groups (default: \code{NULL},
automatically set to \code{rgb(0,0,0,0.05)} if \code{plot.loadings= TRUE} and
\code{load.col= NULL}).}

\item{load.sym}{One of the following (default: \code{19}):
\itemize{
\item A single numeric value (uses the specified value to set the \code{pch}
argument for all groups).
\item A vector of numeric values, the same length as \code{load.grp} (uses the
specified values to set the  \code{pch} argument on a per-group basis, with
each element of \code{load.sym} paired with the corresponding element of
\code{load.grp}).
\item A character vector equal to \code{"text"} (plots variable loadings as text,
with the label set to \code{rownames(pcx$rotation)}).
}}

\item{load.cex}{A numeric value indicating the relative size of the
loading symbols or text to be plotted (default: \code{0.5}).}

\item{PC}{A numeric vector of length = 2 indicating which prinicpal
components should be plotted (default: \code{c(1,2)})}

\item{plot.legend}{A character string equal to either \code{"groups"} or
\code{"loadings"}, or NULL, indicating whether to draw a legend for groups,
loadings or neither (default: \code{NULL}).}

\item{leg.position}{A character string equal to one of the following:
\code{"topleft"}, \code{"top"}, \code{"topright"}, \code{"right"}, \code{"bottomright"}, \code{"bottom"},
\code{"bottomleft"}, \code{"left"}, or \code{"center"}. Cannot be called in conjunction
with \code{leg.xy} (default: \code{NULL}).}

\item{leg.xy}{A numeric vector of length = 2, specifying the x and y
coordinates at which to draw the top-right corner of the legend box. Cannot
be called in conjunctionn with \code{leg.position} (default: \code{NULL})}

\item{leg.cex}{A numeric value indicating the relative size of the legend
text (default: \code{0.55}).}

\item{leg.columns}{A numeric calue indicating the number of columns to split
legend items into (default: \code{1})}

\item{title}{A character string containing the desired title of the biplot
(default: \code{""}).}
}
\value{
Returns a plot showing samples and/or loadings as specified by the
user, which can be saved using a graphics device (e.g. \code{png()}).
}
\description{
This function takes an object produced by \code{prcomp} and produces a biplot which
can be customise to show sample or loading groups, plot samples or loadings as
text or data points, include density plots above and beside the biplot for
sample or loading groups, and add a legend to the biplot.
}
\examples{
# load example HMP data from CoDaSeq package
data("ak_op")      # feature table: 4347 OTU x 30 samples (15x ak, 15x op)
data("hmpgenera")  # OTU taxonomy: 4546 OTU x 6 fields (phylum-genus)

# filter OTU tax table for only those present in feature table
hmpgenera.filt<-hmpgenera[rownames(ak_op),]

# make a list of loading indices by species -> 45 genera + unknown
otu.list<-list()
for(i in levels(factor(hmpgenera.filt$genus))){
  otu.list[[i]]<-which(hmpgenera.filt$genus==i)
  rm(i)
}

# order list by number of OTU aligning to each genus
otu.list.ord<-otu.list[order(sapply(otu.list, length), decreasing = TRUE)]
# 20 genera represented by <=10 OTUs --> can collapse these

# remove genera to be collapsed, order this new list A-Z, capitalise
# 'unknown' because I have OCD, then find indices of all features not
# already present in the loading list and stick them in 'Other'
genera.to.plot<-otu.list.ord[-c(27:46)]
genera.to.plot<-genera.to.plot[order(names(genera.to.plot))]
names(genera.to.plot)[25]<-"Unknown"
genera.to.plot[["Other"]]<-setdiff(c(1:nrow(ak_op)),
                                   unlist(genera.to.plot))

# get colours for these taxa (viridis palettes = colourblind friendly)
otu.cols<-viridis::turbo(27)

# make list of group indices (samples already order in data frame)
group.list<-list(Gingva=c(1:15), Plaque=c(16:30))
group.cols<-c("dodgerblue", "orangered")

# make vector of loading symbols (13x triangle, 13x circle, 1x star)
symbols<-c(rep(17,13),rep(16,13),11)

# Bayesian-multiplicative replacement of count-zeros 
clr.input<-cmultRepl(t(ak_op),label = "0",
                     method = "CZM",output = "p-counts")

# CLR-transformation using codaSeq.clr
clr.data<-codaSeq.clr(t(clr.input), IQLR = FALSE,
                      aitch = FALSE, samples.by.row = TRUE)

# perform PCA
pca.data<-prcomp(t(clr.data))

# plot samples as symbols coloured by groups with uncoloured loadings
codaSeq.PCAplot(pca.data, plot.groups = TRUE, plot.loadings = TRUE,
                plot.ellipses = "groups", plot.density = "groups", 
                grp = group.list, grp.col = group.cols,
                grp.sym = c(15,16), PC = c(1,2), plot.legend = "groups",
                leg.xy = c(-70,-32), leg.cex = 0.7, leg.columns = 1,
                title = "HMP data: keratinised gingiva vs. oral plaque")

# plot loadings as symbols (by genera) with samples as uncoloured text
codaSeq.PCAplot(pca.data, plot.groups = FALSE, plot.loadings = TRUE,
                plot.ellipses = NULL, plot.density = "loadings",
                grp.cex = 0.6, load.grp = genera.to.plot,
                load.col = otu.cols, load.sym = symbols, load.cex = 0.4, 
                PC = c(1,2), plot.legend = "loadings", leg.columns = 9, 
                leg.position = "bottom",
                title = "HMP data: keratinised gingiva vs. oral plaque")

# NOTE: plot device will draw a very 'stretched' legend. Recommended to
# call `png("example.png",units="in",height=6,width=12,res=400)`, draw
# the plot, with `codaSeq.PCAplot()`, then call `dev.off()` to save it 
# as a high-res PNG with a properly drawn legend
}
\seealso{
\code{\link[ALDEx2:aldex]{ALDEx2::aldex()}}, \code{\link[=codaSeq.clr]{codaSeq.clr()}}, \code{\link[=prcomp]{prcomp()}}, \code{\link{ak_op}}
}
\author{
Greg Gloor, Jean Macklaim, Andrew Fernandes, Wallace Chan, Scott Dos Santos
}
